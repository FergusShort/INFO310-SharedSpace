/*
Notes: 
- Flat_ID may need to be generated by javascript on inserts
*/

create user 'sharedspace' identified by 'password';
grant all on *.* to 'sharedspace' with grant option;

use SharedSpace;

drop table if exists Chore_Assignment;
drop table if exists Users_Events;
drop table if exists User;
drop table if exists Groceries;
drop table if exists Chores;
drop table if exists Bills;
drop table if exists Events;
drop table if exists Flat;

-- Instances represent a flat shared between Users
create table Flat (
    Flat_ID varchar(10) not null unique,
    GroupName varchar(50),
    constraint Flat_PK primary key (Flat_ID)
);

-- Instances represent a user (flatmate)
create table User (
    User_ID int not null unique auto_increment,
    Email varchar(30) not null unique,
    Username varchar(30) not null unique,
    Password varchar(15) not null,
    Flat_ID varchar(10),
    constraint User_PK primary key (User_ID),
    constraint User_Flat_FK foreign key (Flat_ID)
        references Flat(Flat_ID)
);

-- Instances represent an Event happening at some point in time
-- A flat can have multiple events, an event must be associated with a flat
create table Events (
    Event_ID int not null unique auto_increment,
    Flat_ID varchar(10) not null,
    Title varchar(40),
    Description varchar(150),
    Start_Time datetime,
    End_Time datetime,
    constraint Event_PK primary key (Event_ID, Flat_ID),
    constraint Event_Flat_FK foreign key (Flat_ID)
        references Flat(Flat_ID)
);

-- Instances represnt a flat bill / expense
-- A flat can have multiple bills, a bill must be associated with a flat
CREATE TABLE Bills (
    Bill_ID INT NOT NULL AUTO_INCREMENT, 
    Flat_ID VARCHAR(10) NOT NULL,
    Initial_Amount DECIMAL(10, 2), 
    Amount_Left DECIMAL(10, 2),         -- running amount so far
    Due_Date DATE,
    Payment_Status CHAR(1) DEFAULT 'U' CHECK (Payment_Status IN ('U', 'P', 'F')), -- U: Unpaid, P: Partial, F: Full
    Title VARCHAR(30),
    Recurring BOOLEAN NOT NULL,
    Time_period INT, -- in days
    Description VARCHAR(100),
    Overdue BOOLEAN NOT NULL DEFAULT FALSE,
    PRIMARY KEY (Bill_ID),  -- Set Bill_ID as the primary key
    CONSTRAINT Bills_Flat_FK FOREIGN KEY (Flat_ID) REFERENCES Flat(Flat_ID),
    CONSTRAINT Amount_CHK CHECK (Amount_Left >= 0),
    CONSTRAINT Initial_Amount_CHK CHECK (Initial_Amount >= 0)

);


-- Instances represent grocery items for grocery list 
-- A flat can have multiple groceries, a grocery item must be associated with a flat
create table Groceries (
    Flat_ID varchar(10) not null,
    Item varchar(30) unique not null,
    Price decimal(7, 2),
    Quantity int,
    constraint Grocery_PK primary key (Flat_ID, Item),
    constraint Grocery_Flat_FK foreign key (Flat_ID)
        references Flat(Flat_ID),
    constraint Price_Quantity_CHK check (Quantity > 0 and Price > 0)
);

-- Instances represent jobs / chores to do for chore list
-- A Flat can have multiple chores, a chore must be associated with a flat
create table Chores (
    Flat_ID varchar(10) not null,
    Chore_ID int not null unique auto_increment,
    Priority ENUM('urgent', 'not-so-urgent', 'low-urgency') NOT NULL,
    Title varchar(30),
    Description varchar(150),
    constraint Chore_PK primary key (Flat_ID, Chore_ID),
    constraint Chores_Flat_FK foreign key (Flat_ID)
        references Flat(Flat_ID)
);

-- Table represents relationship between Users and Chores
-- A user can have multiple chores and chores can have multiple users
create table Chore_Assignment (
    User_ID int not null,
    Chore_ID int not null,
    constraint Chore_Assignment_PK primary key (User_ID, Chore_ID),
    constraint Chore_User_FK foreign key (User_ID)
        references User(User_ID),
    constraint Chore_FK foreign key (Chore_ID)
        references Chores(Chore_ID)
);

-- Table represents relationship between Users and Events
-- A user can have multiple events and an event can have multiple users
create table Users_Events (
    User_ID int not null,
    Event_ID int not null,
    constraint Users_Events_PK primary key (User_ID, Event_ID),
    constraint Event_User_FK foreign key (User_ID)
        references User(User_ID),
    constraint Event_FK foreign key (Event_ID)
        references Events(Event_ID)
);

